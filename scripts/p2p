#!/usr/bin/env python3
from p2p.train import run
import click


@click.group()
def p2p():
    pass

@p2p.command()
@click.option('--fasta-file',
              help='Input sequences in fasta format.')
@click.option('--links-file',
              help='Input tab-delimited file of interactions.')
@click.option('--checkpoint-path',
              help='Checkpoint path.')
@click.option('--data-dir',
              help='Directory of pretrained data.')
@click.option('--model-path',
              help='Output model path.')
@click.option('--logging-path',
              help='Logging directory.', default=None)
@click.option('--training-column',
              help='Training column in links file.', default='Training')
@click.option('--embedding-dimension',
              help='Number of embedding dimensions to model interactions', default=100)
@click.option('--num-neg',
              help='Number of negative samples.', default=2)
@click.option('--epochs',
              help='Number of epochs for training.', default=10)
@click.option('--batch-size',
              help='Number of sequences per batch for training.', default=10)
@click.option('--num-workers',
              help='Number of workers', default=10)
@click.option('--arm-the-gpu', is_flag=True,
              help='Specifies whether or not to use the GPU.', default=False)
def interactions(fasta_file, links_file,
                 checkpoint_path, data_dir, model_path, logging_path,
                 training_column, embedding_dimension, num_neg, epochs,
                 batch_size, num_workers, arm_the_gpu):
    if arm_the_gpu:
        # pick out the first GPU
        device_name = 'cuda:0'
    else:
        device_name = 'cpu'

    run(fasta_file, links_file, 
        checkpoint_path, data_dir,
        model_path, logging_path,
        training_column='Training',
        emb_dimension=embedding_dimension,
        num_neg=num_neg, epochs=epochs, betas=(0.9, 0.95),
        batch_size=batch_size, num_workers=num_workers,
        summary_interval=1,
        device=device_name)

if __name__ == "__main__":
    interactions()
