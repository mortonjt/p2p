#!/usr/bin/env python3
import click
from poplar.train.simple_ppi import simple_ppirun


@click.group()
def poplar():
    pass

@poplar.command()
@click.option('--training-links',
              help='Comma separated list of training link data.')
@click.option('--testing-links',
              help='Comma separated list of testing link data.')
@click.option('--validation-links',
              help='Comma separated list of validation link data.')
@click.option('--output-directory', default='output_directory',
              help='Output directory name.')
@click.option('--split-size', default=100000,
              help='Number of lines per training file.')
def preprocess(training_links, testing_links, validation_links,
               output_directory, split_size):
    # TODO!

    ## Training data
    # Combines training links files together

    # Shuffles training links files via bash shuf

    # Fragments training links files via split

    # Saves training files to output directory

    ## Testing data
    # Combines testing links files together

    # Sorts testing files by (1) taxonomy and (2) protein

    # Saves training files to output directory

    ## Validation data
    # Combines testing links files together

    # Sorts testing files by (1) taxonomy and (2) protein

    # Saves training files to output directory
    pass


@poplar.command()
@click.option('--fasta-file',
              help='Input sequences in fasta format.')
@click.option('--links-directory',
              help='Directory of tab-delimited files of interactions.')
@click.option('--checkpoint-path',
              help='Checkpoint path.')
@click.option('--data-dir',
              help='Directory of pretrained data.')
@click.option('--model-path',
              help='Output model path.')
@click.option('--logging-path',
              help='Logging directory.', default=None)
@click.option('--training-column',
              help='Training column in links file.', default='Training')
@click.option('--embedding-dimension',
              help='Number of embedding dimensions to model interactions', default=100)
@click.option('--num-neg',
              help='Number of negative samples.', default=2)
@click.option('--max-steps', default=0, type=int,
              help=('Maximum number of steps to run for. Each step corresponds to'
                    'the evaluation of a protein pair. If this is zero, then it will'
                    'default to one epochs worth of protein pairs (ie one pass through'
                    'all of the protein pairs in the training dataset).'))
@click.option('--learning-rate',
              help='Learning rate.', default=5e-5)
@click.option('--warmup-steps',
              help='Warmup steps for scheduler.', default=0)
@click.option('--gradient-accumulation-steps',
              help=('Number of steps before gradients are computed. '
                   'This allows for a larger effective batch size.'),
              default=0)
@click.option('--clip-norm',
              help='Clipping norm of the gradients.', default=10.)
@click.option('--batch-size',
              help='Number of sequences per batch for training per GPU.', default=10)
@click.option('--num-workers',
              help='Number of workers', default=10)
@click.option('--summary-interval',
              help='Summary interval in seconds', default=7200)
@click.option('--checkpoint-interval',
              help='Checkpoint interval in seconds', default=7200)
@click.option('--arm-the-gpu', is_flag=True,
              help='Specifies whether or not to use the GPU.', default=False)
def simple_ppi(fasta_file, links_directory,
                   checkpoint_path, data_dir, model_path, logging_path,
                   training_column, embedding_dimension, num_neg, max_steps,
                   learning_rate, warmup_steps, gradient_accumulation_steps,
                   clip_norm, batch_size, num_workers,
                   summary_interval, checkpoint_interval, arm_the_gpu):
    if arm_the_gpu:
        # pick out the first GPU
        device_name = 'cuda'
    else:
            device_name = 'cpu'
    print('links_directory', links_directory)
    simple_ppirun(fasta_file, links_directory,
        checkpoint_path, data_dir,
        model_path, logging_path,
        training_column=training_column,
        emb_dimension=embedding_dimension,
        num_neg=num_neg, max_steps=max_steps,
        learning_rate=learning_rate,
        warmup_steps=warmup_steps,
        gradient_accumulation_steps=gradient_accumulation_steps,
        clip_norm=clip_norm, batch_size=batch_size, num_workers=num_workers,
        summary_interval=summary_interval,
        checkpoint_interval=checkpoint_interval,
        device=device_name)


if __name__ == "__main__":
    poplar()
